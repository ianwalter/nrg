import fs from 'fs'
import requireFromString from 'require-from-string'
import devalue from 'devalue'
import cloneable from '@ianwalter/cloneable'
import createUrl from '@ianwalter/url'

export async function serveSsr (ctx, next) {
  const { page, template, entry, renderer } = ctx.cfg.ssr
  if (ctx.cfg.isProd && !renderer) {
    // Create the page renderer that will be used by the middleware if it
    // wasn't given on initialization.
    try {
      if (!page) ctx.cfg.ssr.page = fs.readFileSync(template, 'utf8')
      ctx.cfg.ssr.renderer = require(entry).default(ctx.cfg.ssr.page)
    } catch (err) {
      ctx.logger.warn(err)
    }
  } else if (!ctx.cfg.isProd) {
    // If not in production mode, use the renderer generated by Webpack so
    // that it can be changed without having to restart the server.
    const fs = ctx.webpack.fileSystem
    // FIXME: This should be done asynchronously when upgraded to Webpack v5.
    const source = fs.readFileSync(entry, 'utf8')
    ctx.cfg.ssr.page = fs.readFileSync(template, 'utf8')
    ctx.cfg.ssr.renderer = requireFromString(source).default(ctx.cfg.ssr.page)
  }

  // Add the "full" URL on the context so that a router can use it with the
  // URL class.
  ctx.fullUrl = createUrl(ctx.cfg.baseUrl, ctx.url)

  // Call the renderer to get pack the rendered page data.
  const result = await ctx.cfg.ssr.renderer(ctx, next)

  // Create a SSR-namespaced logger instance for debugging.
  const logger = ctx.logger.ns('nrg.ssr')

  if (typeof result === 'string') {
    // If a string was returned instead of a page object, redirect to it as a
    // URL.
    logger.debug('ssr.serveSsr • Redirecting to:', result)
    return ctx.redirect(result)
  } else if (!result) {
    // If result is falsy, e.g. a 404 page isn't even returned, assume next
    // was called to continue to the next middleware so don't try to render a
    // page.
    return
  }

  // If the response body has not already been set, construct the HTML
  // document that will be served.
  if (!ctx.body) {
    let { status, head = '', css = { code: '' }, html = '', ssr } = result

    // If SSR data was provided, embed it into the page so that it can be used
    // when the client-side application boots and removed from the page if
    // necessary.
    if (ssr) {
      // Use cloneable to remove any functions from the ssr object.
      ssr = cloneable(ssr)
      logger.debug('ssr.serveSsr • SSR data', ssr)
      head += `
        <script id="ssrData" type="text/javascript">
          window.__SSR_DATA__ = ${devalue(ssr)}
        </script>
      `
    }

    // If a status was returned, set it (to something other than 200).
    if (status) {
      ctx.status = status
    }

    // Replace the placeholders on the base page template with the code return
    // by the end-user's SSR entry.
    ctx.body = ctx.cfg.ssr.page
      .replace('<!-- head-outlet -->', head)
      .replace('/* css-outlet */', css.code)
      .replace('<!-- html-outlet -->', html)
  }
}
